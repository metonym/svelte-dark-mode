# {name} v{version}

<script>
  import DarkMode from "svelte-dark-mode";
  import { afterUpdate } from "svelte";

  let theme;

  $: switchTheme = theme === "dark" ? "light" : "dark";

  afterUpdate(() => {
    document.body.className = theme;
  });

  let name = process.env.NAME;
  let version = process.env.VERSION;
</script>

<style>
  :global(body) {
    font-family: sans-serif;
    line-height: 1.42;
  }

  :global(main > *) {
    margin-bottom: 1.5rem;
  }

  :global(.dark) {
    background-color: #262626;
    color: #f4f4f4;
  }

  :global(.dark a) {
    color: #f4f4f4;
  }

  h1 {
    font-size: 2.25rem;
  }

  button {
    background: none;
    border: 0;
    font: inherit;
    color: inherit;
    font-size: 1.25rem;
    text-decoration: underline;
    cursor: pointer;
  }
</style>

<DarkMode
bind:theme
on:change={(e) => {
console.log(e.detail);
}} />

## This is {theme} mode.

<button
type="button"
on:click={() => {
theme = switchTheme;
}}>
Switch to {switchTheme} mode
</button>

<p>
  This component uses <a
    href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"
    target="_blank"
    rel="noopener noreferrer">
    window.localStorage
  </a> to persist the theme locally. If you reload the page, the browser will remember
  the theme.
</p>

<p>
  If you change the color scheme in your System Preferences, the theme will
  update accordingly when the page is reloaded.
</p>

## Sample code

```html
<script>
  import DarkMode from "svelte-dark-mode";
  import { afterUpdate } from "svelte";

  let theme;

  $: switchTheme = theme === "dark" ? "light" : "dark";

  afterUpdate(() => {
    document.body.className = theme;
  });
</script>

<style>
  :global(.dark) {
    background-color: #262626;
    color: #f4f4f4;
  }

  :global(.dark a) {
    color: #f4f4f4;
  }
</style>

<DarkMode bind:theme />

<button type="button" on:click={() => { theme = switchTheme; }}>
  Switch to {switchTheme} mode
</button>
```
